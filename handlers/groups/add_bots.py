import asyncio
import datetime
import os
import shutil
import subprocess
import sys

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import ContentTypes, CallbackQuery

from keyboards.inline.in_menu import in_menu_start

from loader import dp, PAYMENTS_PROVIDER_TOKEN, bot
from utils.db_api.db import BotDB

@dp.callback_query_handler(lambda c: c.data.startswith('sback'),state='*')
async def add_channel(call: CallbackQuery, state: FSMContext):
    users_id = call.from_user.id
    keyboard = await in_menu_start(users_id)

    await state.finish()
    await call.message.edit_text("<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>\n\n"
                         "–Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –±–æ—Ç–∞ü§ñ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¢–ì –∫–∞–Ω–∞–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æüÜì!", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('addbots'))
async def add_channel(call: CallbackQuery, state: FSMContext):
    __userid = call.from_user.id
    path_data_file = call.data.split(' ')[-1]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text=f"üîô –ù–∞–∑–∞–¥", callback_data=f"sback"))

    await call.message.edit_text(text='–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:\n'
                                      '1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ @BotFather\n'
                                      '2. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.',reply_markup=keyboard)
    await state.set_state('addbots')


@dp.message_handler(state='addbots')
async def start(message: types.Message, state: FSMContext):
    users_id = message.from_user.id
    keyboard = await in_menu_start(users_id)

    # –∏–º—è –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    src_folder = 'pattern'
    # –∏–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
    dst_folder = f'bots/{message.text.replace(":", "")}'
    if os.path.exists(dst_folder):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton(text=f"üîô –ù–∞–∑–∞–¥", callback_data=f"sback"))
        await message.answer('‚ô®Ô∏è–ß—Ç–æ-—Ç–æ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π', reply_markup=keyboard)
        await state.finish()
        return
    else:
        shutil.copytree(src_folder, dst_folder)
        proc = subprocess.Popen(['python', f"{dst_folder}/app.py", f'{message.text}',f"{message.from_user.id}"],
                                shell=False)
        msg = await message.answer("–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –º—ã —Å–µ–π—á–∞—Å –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º üí§")
        get_db_telegram = BotDB()
        await asyncio.sleep(2)
        # –¢–µ—Å—Ç–æ–≤–æ–µ
        apitoken = message.text
        userid = message.from_user.id
        get_db_telegram = BotDB()
        get_db_telegram.add_bots_in_bd(userid, apitoken)

        if get_db_telegram.check_bots(message.text):
            get_db_telegram.edit_pid_bot(apitoken=message.text, pid=proc.pid)

            bots_temp = get_db_telegram.get_bot_in_api_token(apitoken=message.text)
            await message.answer(f'üõ†–ë–æ—Ç - @{bots_temp["username"]} –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –±–æ—Ç—ã‚úÖ\n'
                                 '–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(types.InlineKeyboardButton(text=f"üîô –ù–∞–∑–∞–¥", callback_data=f"sback"))
            await message.answer('‚ô®Ô∏è–ß—Ç–æ-—Ç–æ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π',reply_markup=keyboard)
            proc.kill()
        await state.finish()
